/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockMarketplace,
  MockMarketplaceInterface,
} from "../../../contracts/develompent/MockMarketplace";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buy1",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buy2",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenPrice",
        type: "uint256",
      },
    ],
    name: "sell",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "sellBy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d3e380380610d3e833981810160405281019061003291906100b0565b61004c6792c606059a30820060c01b6100ad60201b60201c565b61006667f0baf99fce730e3460c01b6100ad60201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100e2565b50565b6000602082840312156100c257600080fd5b815160018060a01b03811681146100d857600080fd5b8091505092915050565b610c4d806100f16000396000f3fe6080604052600436106100555760003560e01c806326a49e371461005a578063b59a1d3714610097578063d79875eb146100b3578063ddf3c6c7146100dc578063fb0c078214610119578063fc0c546a14610135575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610a19565b610160565b60405161008e9190610a35565b60405180910390f35b6100b160048036038101906100ac9190610a19565b610178565b005b3480156100bf57600080fd5b506100da60048036038101906100d59190610a46565b6104cc565b005b3480156100e857600080fd5b5061010360048036038101906100fe9190610a19565b610575565b6040516101109190610a6b565b60405180910390f35b610133600480360381019061012e9190610a19565b6105a8565b005b34801561014157600080fd5b5061014a6108fc565b6040516101579190610a6b565b60405180910390f35b60016020528060005260406000206000915090505481565b61018c6769c9370b8e40c2e760c01b610922565b6101a067c0e038e4711a094a60c01b610922565b6101b4672f736c8b7247fe8e60c01b610922565b6101c86755560fbc13ccf05360c01b610922565b3460016000838152602001908152602001600020541461021d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021490610a84565b60405180910390fd5b61023167316c3557e1a430f460c01b610922565b61024567c0b245bc651eec6360c01b610922565b610259677e4311057e6dd2d460c01b610922565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60008084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846040518463ffffffff1660e01b81526004016102ea93929190610ac2565b600060405180830381600087803b15801561030457600080fd5b505af1158015610318573d6000803e3d6000fd5b5050505061033067c93297e001cd35f660c01b610922565b61034467f55aa7b19e4638cf60c01b610922565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a55205a84346040518363ffffffff1660e01b81526004016103a4929190610aed565b6040805180830381865afa1580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e49190610b05565b915091506103fc6742be9cd80a622fee60c01b610922565b61041067d1da4f3773ee8e7560c01b610922565b610439818373ffffffffffffffffffffffffffffffffffffffff1661092590919063ffffffff16565b61044d67c34c673cd1aed73c60c01b610922565b610461670e2b5e8545f1a2a660c01b610922565b6104c781346104709190610b40565b60008086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661092590919063ffffffff16565b505050565b6104e0675b98267350baf85b60c01b610922565b6104f4671ef7903ae477805260c01b610922565b3360008084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061055967481d213fe348dd6d60c01b610922565b8060016000848152602001908152602001600020819055505050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105bc6731f7e8953b0d5a4260c01b610922565b6105d067a0d49866c3db88b060c01b610922565b6105e467a162b9df45eb343b60c01b610922565b6105f867d76118efc58b548e60c01b610922565b3460016000838152602001908152602001600020541461064d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064490610a84565b60405180910390fd5b610661671ad46aa451fe104460c01b610922565b610675675922ab0b085a1c5f60c01b610922565b61068967a82ca9d7d5ddc23160c01b610922565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a55205a84346040518363ffffffff1660e01b81526004016106e9929190610aed565b6040805180830381865afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190610b05565b915091506107416771a060b35e91e95360c01b610922565b61075567d3c9328a6fc181f760c01b610922565b61077e818373ffffffffffffffffffffffffffffffffffffffff1661092590919063ffffffff16565b61079267cc49c3e0d81207ef60c01b610922565b6107a6678279a154a931914360c01b610922565b61080c81346107b59190610b40565b60008086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661092590919063ffffffff16565b6108206771798f565090c36b60c01b610922565b61083467e7e8d501375e52c760c01b610922565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60008086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633866040518463ffffffff1660e01b81526004016108c593929190610ac2565b600060405180830381600087803b1580156108df57600080fd5b505af11580156108f3573d6000803e3d6000fd5b50505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b50565b80471015610968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095f90610b6b565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161098e90610ba9565b60006040518083038185875af1925050503d80600081146109cb576040519150601f19603f3d011682016040523d82523d6000602084013e6109d0565b606091505b5050905080610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0b90610bb3565b60405180910390fd5b505050565b600060208284031215610a2b57600080fd5b8135905092915050565b600060208201905082825292915050565b60008060408385031215610a5957600080fd5b82359150602083013590509250929050565b600060208201905060018060a01b038316825292915050565b60208152600660208201527f217072696365000000000000000000000000000000000000000000000000000060408201526000606082019050919050565b600060608201905060018060a01b038086168352808516602084015250826040830152949350505050565b60006040820190508382528260208301529392505050565b60008060408385031215610b1857600080fd5b825160018060a01b0381168114610b2e57600080fd5b80925050602083015190509250929050565b600082821015610b6057634e487b7160e01b600052601160045260246000fd5b828203905092915050565b60208152601d60208201527f416464726573733a20696e73756666696369656e742062616c616e636500000060408201526000606082019050919050565b6000819050919050565b60208152603a60208201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d617920686176652072657665727465640000000000006060820152600060808201905091905056fea264697066735822122055fa753f1ee40a70a8a77bc761ab002e6b2d3abd24fcbc60d80b9cc796faaf8164736f6c634300080d0033";

type MockMarketplaceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockMarketplaceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockMarketplace__factory extends ContractFactory {
  constructor(...args: MockMarketplaceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockMarketplace> {
    return super.deploy(_token, overrides || {}) as Promise<MockMarketplace>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): MockMarketplace {
    return super.attach(address) as MockMarketplace;
  }
  override connect(signer: Signer): MockMarketplace__factory {
    return super.connect(signer) as MockMarketplace__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockMarketplaceInterface {
    return new utils.Interface(_abi) as MockMarketplaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockMarketplace {
    return new Contract(address, _abi, signerOrProvider) as MockMarketplace;
  }
}
