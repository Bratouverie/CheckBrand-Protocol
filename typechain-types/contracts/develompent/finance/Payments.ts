/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IValidator {
  export type BuyTokensDataStruct = {
    receiver: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
    paymentAmount: PromiseOrValue<BigNumberish>;
    amountOfCBCOINToPurchase: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BigNumberish>;
  };

  export type BuyTokensDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    receiver: string;
    paymentToken: string;
    paymentAmount: BigNumber;
    amountOfCBCOINToPurchase: BigNumber;
    deadline: BigNumber;
    salt: BigNumber;
  };

  export type CreateCollectionDataStruct = {
    brandName: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    supplyLimit: PromiseOrValue<BigNumberish>;
    paymentAmount: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BigNumberish>;
  };

  export type CreateCollectionDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    brandName: string;
    creator: string;
    supplyLimit: BigNumber;
    paymentAmount: BigNumber;
    deadline: BigNumber;
    salt: BigNumber;
  };

  export type SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface PaymentsInterface extends utils.Interface {
  functions: {
    "BUY_TOKENS_TYPE_HASH()": FunctionFragment;
    "CACHED_DOMAIN_SEPARATOR()": FunctionFragment;
    "CBCOINTreasury()": FunctionFragment;
    "CHIEF_ADMIN_ROLE()": FunctionFragment;
    "CREATE_TOLLECTION_TYPE_HASH()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DOMAIN_TYPE_HASH()": FunctionFragment;
    "PLATFORM_ADMIN_ROLE()": FunctionFragment;
    "getBuyTokensHash((address,address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "getCreateCollectionHash((string,address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "listValidators()": FunctionFragment;
    "masterStation()": FunctionFragment;
    "minVerificationsCount()": FunctionFragment;
    "nonce()": FunctionFragment;
    "paymentForTheCreationOfACollection((string,address,uint256,uint256,uint256,uint256),(uint8,bytes32,bytes32)[])": FunctionFragment;
    "purchaseCBCOINWithETH((address,address,uint256,uint256,uint256,uint256),(uint8,bytes32,bytes32)[])": FunctionFragment;
    "purchaseCBCOINWithToken((address,address,uint256,uint256,uint256,uint256),(uint8,bytes32,bytes32)[])": FunctionFragment;
    "setMinVerificationsCount(uint256)": FunctionFragment;
    "validated(bytes32)": FunctionFragment;
    "withdrawFunds(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BUY_TOKENS_TYPE_HASH"
      | "CACHED_DOMAIN_SEPARATOR"
      | "CBCOINTreasury"
      | "CHIEF_ADMIN_ROLE"
      | "CREATE_TOLLECTION_TYPE_HASH"
      | "DEFAULT_ADMIN_ROLE"
      | "DOMAIN_TYPE_HASH"
      | "PLATFORM_ADMIN_ROLE"
      | "getBuyTokensHash"
      | "getCreateCollectionHash"
      | "listValidators"
      | "masterStation"
      | "minVerificationsCount"
      | "nonce"
      | "paymentForTheCreationOfACollection"
      | "purchaseCBCOINWithETH"
      | "purchaseCBCOINWithToken"
      | "setMinVerificationsCount"
      | "validated"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BUY_TOKENS_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CACHED_DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CBCOINTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHIEF_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_TOLLECTION_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyTokensHash",
    values: [IValidator.BuyTokensDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateCollectionHash",
    values: [IValidator.CreateCollectionDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "listValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterStation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minVerificationsCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentForTheCreationOfACollection",
    values: [
      IValidator.CreateCollectionDataStruct,
      IValidator.SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCBCOINWithETH",
    values: [IValidator.BuyTokensDataStruct, IValidator.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCBCOINWithToken",
    values: [IValidator.BuyTokensDataStruct, IValidator.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinVerificationsCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validated",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BUY_TOKENS_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CACHED_DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CBCOINTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHIEF_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_TOLLECTION_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyTokensHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateCollectionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterStation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVerificationsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentForTheCreationOfACollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCBCOINWithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCBCOINWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinVerificationsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "BuyTokensValidated(tuple,uint256)": EventFragment;
    "CreateCollectionValidated(tuple,uint256)": EventFragment;
    "ETHWithdrawn(address,address,uint256)": EventFragment;
    "PayedForTheCreationOfACollection(address,uint256,uint256)": EventFragment;
    "PurchasedCBCOINWithETH(address,uint256,uint256)": EventFragment;
    "PurchasedCBCOINWithToken(address,address,uint256,uint256)": EventFragment;
    "SettedMinVerificationsCount(uint256)": EventFragment;
    "TokenWithdrawn(address,address,address,uint256)": EventFragment;
    "ValidatedFrom(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyTokensValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateCollectionValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHWithdrawn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PayedForTheCreationOfACollection"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchasedCBCOINWithETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchasedCBCOINWithToken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SettedMinVerificationsCount"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatedFrom"): EventFragment;
}

export interface BuyTokensValidatedEventObject {
  data: IValidator.BuyTokensDataStructOutput;
  verifications: BigNumber;
}
export type BuyTokensValidatedEvent = TypedEvent<
  [IValidator.BuyTokensDataStructOutput, BigNumber],
  BuyTokensValidatedEventObject
>;

export type BuyTokensValidatedEventFilter =
  TypedEventFilter<BuyTokensValidatedEvent>;

export interface CreateCollectionValidatedEventObject {
  data: IValidator.CreateCollectionDataStructOutput;
  verifications: BigNumber;
}
export type CreateCollectionValidatedEvent = TypedEvent<
  [IValidator.CreateCollectionDataStructOutput, BigNumber],
  CreateCollectionValidatedEventObject
>;

export type CreateCollectionValidatedEventFilter =
  TypedEventFilter<CreateCollectionValidatedEvent>;

export interface ETHWithdrawnEventObject {
  receiver: string;
  sender: string;
  amount: BigNumber;
}
export type ETHWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  ETHWithdrawnEventObject
>;

export type ETHWithdrawnEventFilter = TypedEventFilter<ETHWithdrawnEvent>;

export interface PayedForTheCreationOfACollectionEventObject {
  account: string;
  paymentAmount: BigNumber;
  supplyLimiy: BigNumber;
}
export type PayedForTheCreationOfACollectionEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PayedForTheCreationOfACollectionEventObject
>;

export type PayedForTheCreationOfACollectionEventFilter =
  TypedEventFilter<PayedForTheCreationOfACollectionEvent>;

export interface PurchasedCBCOINWithETHEventObject {
  receiver: string;
  paymentAmount: BigNumber;
  purchasedCBCOINAmount: BigNumber;
}
export type PurchasedCBCOINWithETHEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PurchasedCBCOINWithETHEventObject
>;

export type PurchasedCBCOINWithETHEventFilter =
  TypedEventFilter<PurchasedCBCOINWithETHEvent>;

export interface PurchasedCBCOINWithTokenEventObject {
  paymentToken: string;
  receiver: string;
  paymentAmount: BigNumber;
  purchasedCBCOINAmount: BigNumber;
}
export type PurchasedCBCOINWithTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  PurchasedCBCOINWithTokenEventObject
>;

export type PurchasedCBCOINWithTokenEventFilter =
  TypedEventFilter<PurchasedCBCOINWithTokenEvent>;

export interface SettedMinVerificationsCountEventObject {
  count: BigNumber;
}
export type SettedMinVerificationsCountEvent = TypedEvent<
  [BigNumber],
  SettedMinVerificationsCountEventObject
>;

export type SettedMinVerificationsCountEventFilter =
  TypedEventFilter<SettedMinVerificationsCountEvent>;

export interface TokenWithdrawnEventObject {
  token: string;
  receiver: string;
  sender: string;
  amount: BigNumber;
}
export type TokenWithdrawnEvent = TypedEvent<
  [string, string, string, BigNumber],
  TokenWithdrawnEventObject
>;

export type TokenWithdrawnEventFilter = TypedEventFilter<TokenWithdrawnEvent>;

export interface ValidatedFromEventObject {
  hashData: string;
  validator: string;
}
export type ValidatedFromEvent = TypedEvent<
  [string, string],
  ValidatedFromEventObject
>;

export type ValidatedFromEventFilter = TypedEventFilter<ValidatedFromEvent>;

export interface Payments extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaymentsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BUY_TOKENS_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    CACHED_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    CBCOINTreasury(overrides?: CallOverrides): Promise<[string]>;

    CHIEF_ADMIN_ROLE(overrides?: CallOverrides): Promise<[number]>;

    CREATE_TOLLECTION_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[number]>;

    DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    PLATFORM_ADMIN_ROLE(overrides?: CallOverrides): Promise<[number]>;

    getBuyTokensHash(
      _data: IValidator.BuyTokensDataStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreateCollectionHash(
      _data: IValidator.CreateCollectionDataStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    listValidators(overrides?: CallOverrides): Promise<[string[]]>;

    masterStation(overrides?: CallOverrides): Promise<[string]>;

    minVerificationsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    paymentForTheCreationOfACollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinVerificationsCount(
      _minVerificationsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawFunds(
      _tokenToWithdraw: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BUY_TOKENS_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  CACHED_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  CBCOINTreasury(overrides?: CallOverrides): Promise<string>;

  CHIEF_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

  CREATE_TOLLECTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

  DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  PLATFORM_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

  getBuyTokensHash(
    _data: IValidator.BuyTokensDataStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreateCollectionHash(
    _data: IValidator.CreateCollectionDataStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  listValidators(overrides?: CallOverrides): Promise<string[]>;

  masterStation(overrides?: CallOverrides): Promise<string>;

  minVerificationsCount(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  paymentForTheCreationOfACollection(
    _data: IValidator.CreateCollectionDataStruct,
    _signature: IValidator.SignatureStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchaseCBCOINWithETH(
    _data: IValidator.BuyTokensDataStruct,
    _signature: IValidator.SignatureStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchaseCBCOINWithToken(
    _data: IValidator.BuyTokensDataStruct,
    _signature: IValidator.SignatureStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinVerificationsCount(
    _minVerificationsCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validated(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawFunds(
    _tokenToWithdraw: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BUY_TOKENS_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    CACHED_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    CBCOINTreasury(overrides?: CallOverrides): Promise<string>;

    CHIEF_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

    CREATE_TOLLECTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

    DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    PLATFORM_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

    getBuyTokensHash(
      _data: IValidator.BuyTokensDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreateCollectionHash(
      _data: IValidator.CreateCollectionDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    listValidators(overrides?: CallOverrides): Promise<string[]>;

    masterStation(overrides?: CallOverrides): Promise<string>;

    minVerificationsCount(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    paymentForTheCreationOfACollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMinVerificationsCount(
      _minVerificationsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawFunds(
      _tokenToWithdraw: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyTokensValidated(tuple,uint256)"(
      data?: null,
      verifications?: null
    ): BuyTokensValidatedEventFilter;
    BuyTokensValidated(
      data?: null,
      verifications?: null
    ): BuyTokensValidatedEventFilter;

    "CreateCollectionValidated(tuple,uint256)"(
      data?: null,
      verifications?: null
    ): CreateCollectionValidatedEventFilter;
    CreateCollectionValidated(
      data?: null,
      verifications?: null
    ): CreateCollectionValidatedEventFilter;

    "ETHWithdrawn(address,address,uint256)"(
      receiver?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): ETHWithdrawnEventFilter;
    ETHWithdrawn(
      receiver?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): ETHWithdrawnEventFilter;

    "PayedForTheCreationOfACollection(address,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      paymentAmount?: PromiseOrValue<BigNumberish> | null,
      supplyLimiy?: PromiseOrValue<BigNumberish> | null
    ): PayedForTheCreationOfACollectionEventFilter;
    PayedForTheCreationOfACollection(
      account?: PromiseOrValue<string> | null,
      paymentAmount?: PromiseOrValue<BigNumberish> | null,
      supplyLimiy?: PromiseOrValue<BigNumberish> | null
    ): PayedForTheCreationOfACollectionEventFilter;

    "PurchasedCBCOINWithETH(address,uint256,uint256)"(
      receiver?: PromiseOrValue<string> | null,
      paymentAmount?: null,
      purchasedCBCOINAmount?: null
    ): PurchasedCBCOINWithETHEventFilter;
    PurchasedCBCOINWithETH(
      receiver?: PromiseOrValue<string> | null,
      paymentAmount?: null,
      purchasedCBCOINAmount?: null
    ): PurchasedCBCOINWithETHEventFilter;

    "PurchasedCBCOINWithToken(address,address,uint256,uint256)"(
      paymentToken?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      paymentAmount?: null,
      purchasedCBCOINAmount?: null
    ): PurchasedCBCOINWithTokenEventFilter;
    PurchasedCBCOINWithToken(
      paymentToken?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      paymentAmount?: null,
      purchasedCBCOINAmount?: null
    ): PurchasedCBCOINWithTokenEventFilter;

    "SettedMinVerificationsCount(uint256)"(
      count?: null
    ): SettedMinVerificationsCountEventFilter;
    SettedMinVerificationsCount(
      count?: null
    ): SettedMinVerificationsCountEventFilter;

    "TokenWithdrawn(address,address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenWithdrawnEventFilter;
    TokenWithdrawn(
      token?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenWithdrawnEventFilter;

    "ValidatedFrom(bytes32,address)"(
      hashData?: null,
      validator?: null
    ): ValidatedFromEventFilter;
    ValidatedFrom(hashData?: null, validator?: null): ValidatedFromEventFilter;
  };

  estimateGas: {
    BUY_TOKENS_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    CACHED_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    CBCOINTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    CHIEF_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_TOLLECTION_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    PLATFORM_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyTokensHash(
      _data: IValidator.BuyTokensDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreateCollectionHash(
      _data: IValidator.CreateCollectionDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listValidators(overrides?: CallOverrides): Promise<BigNumber>;

    masterStation(overrides?: CallOverrides): Promise<BigNumber>;

    minVerificationsCount(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    paymentForTheCreationOfACollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinVerificationsCount(
      _minVerificationsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFunds(
      _tokenToWithdraw: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BUY_TOKENS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CACHED_DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CBCOINTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CHIEF_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CREATE_TOLLECTION_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PLATFORM_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyTokensHash(
      _data: IValidator.BuyTokensDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreateCollectionHash(
      _data: IValidator.CreateCollectionDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterStation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minVerificationsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentForTheCreationOfACollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinVerificationsCount(
      _minVerificationsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      _tokenToWithdraw: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
