/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IValidator {
  export type BuyTokensDataStruct = {
    receiver: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
    paymentAmount: PromiseOrValue<BigNumberish>;
    amountOfCBCOINToPurchase: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BigNumberish>;
  };

  export type BuyTokensDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    receiver: string;
    paymentToken: string;
    paymentAmount: BigNumber;
    amountOfCBCOINToPurchase: BigNumber;
    deadline: BigNumber;
    salt: BigNumber;
  };

  export type CreateCollectionDataStruct = {
    brandName: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    supplyLimit: PromiseOrValue<BigNumberish>;
    paymentAmount: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BigNumberish>;
  };

  export type CreateCollectionDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    brandName: string;
    creator: string;
    supplyLimit: BigNumber;
    paymentAmount: BigNumber;
    deadline: BigNumber;
    salt: BigNumber;
  };
}

export interface ValidatorInterface extends utils.Interface {
  functions: {
    "BUY_TOKENS_TYPE_HASH()": FunctionFragment;
    "CACHED_DOMAIN_SEPARATOR()": FunctionFragment;
    "CREATE_TOLLECTION_TYPE_HASH()": FunctionFragment;
    "DOMAIN_TYPE_HASH()": FunctionFragment;
    "getBuyTokensHash((address,address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "getCreateCollectionHash((string,address,uint256,uint256,uint256,uint256))": FunctionFragment;
    "minVerificationsCount()": FunctionFragment;
    "nonce()": FunctionFragment;
    "validated(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BUY_TOKENS_TYPE_HASH"
      | "CACHED_DOMAIN_SEPARATOR"
      | "CREATE_TOLLECTION_TYPE_HASH"
      | "DOMAIN_TYPE_HASH"
      | "getBuyTokensHash"
      | "getCreateCollectionHash"
      | "minVerificationsCount"
      | "nonce"
      | "validated"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BUY_TOKENS_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CACHED_DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_TOLLECTION_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyTokensHash",
    values: [IValidator.BuyTokensDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateCollectionHash",
    values: [IValidator.CreateCollectionDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "minVerificationsCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validated",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BUY_TOKENS_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CACHED_DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_TOLLECTION_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyTokensHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateCollectionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVerificationsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validated", data: BytesLike): Result;

  events: {
    "BuyTokensValidated(tuple,uint256)": EventFragment;
    "CreateCollectionValidated(tuple,uint256)": EventFragment;
    "SettedMinVerificationsCount(uint256)": EventFragment;
    "ValidatedFrom(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyTokensValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateCollectionValidated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SettedMinVerificationsCount"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatedFrom"): EventFragment;
}

export interface BuyTokensValidatedEventObject {
  data: IValidator.BuyTokensDataStructOutput;
  verifications: BigNumber;
}
export type BuyTokensValidatedEvent = TypedEvent<
  [IValidator.BuyTokensDataStructOutput, BigNumber],
  BuyTokensValidatedEventObject
>;

export type BuyTokensValidatedEventFilter =
  TypedEventFilter<BuyTokensValidatedEvent>;

export interface CreateCollectionValidatedEventObject {
  data: IValidator.CreateCollectionDataStructOutput;
  verifications: BigNumber;
}
export type CreateCollectionValidatedEvent = TypedEvent<
  [IValidator.CreateCollectionDataStructOutput, BigNumber],
  CreateCollectionValidatedEventObject
>;

export type CreateCollectionValidatedEventFilter =
  TypedEventFilter<CreateCollectionValidatedEvent>;

export interface SettedMinVerificationsCountEventObject {
  count: BigNumber;
}
export type SettedMinVerificationsCountEvent = TypedEvent<
  [BigNumber],
  SettedMinVerificationsCountEventObject
>;

export type SettedMinVerificationsCountEventFilter =
  TypedEventFilter<SettedMinVerificationsCountEvent>;

export interface ValidatedFromEventObject {
  hashData: string;
  validator: string;
}
export type ValidatedFromEvent = TypedEvent<
  [string, string],
  ValidatedFromEventObject
>;

export type ValidatedFromEventFilter = TypedEventFilter<ValidatedFromEvent>;

export interface Validator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BUY_TOKENS_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    CACHED_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    CREATE_TOLLECTION_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    getBuyTokensHash(
      _data: IValidator.BuyTokensDataStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreateCollectionHash(
      _data: IValidator.CreateCollectionDataStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    minVerificationsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    validated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  BUY_TOKENS_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  CACHED_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  CREATE_TOLLECTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  getBuyTokensHash(
    _data: IValidator.BuyTokensDataStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreateCollectionHash(
    _data: IValidator.CreateCollectionDataStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  minVerificationsCount(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  validated(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    BUY_TOKENS_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    CACHED_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    CREATE_TOLLECTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    getBuyTokensHash(
      _data: IValidator.BuyTokensDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreateCollectionHash(
      _data: IValidator.CreateCollectionDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    minVerificationsCount(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    validated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BuyTokensValidated(tuple,uint256)"(
      data?: null,
      verifications?: null
    ): BuyTokensValidatedEventFilter;
    BuyTokensValidated(
      data?: null,
      verifications?: null
    ): BuyTokensValidatedEventFilter;

    "CreateCollectionValidated(tuple,uint256)"(
      data?: null,
      verifications?: null
    ): CreateCollectionValidatedEventFilter;
    CreateCollectionValidated(
      data?: null,
      verifications?: null
    ): CreateCollectionValidatedEventFilter;

    "SettedMinVerificationsCount(uint256)"(
      count?: null
    ): SettedMinVerificationsCountEventFilter;
    SettedMinVerificationsCount(
      count?: null
    ): SettedMinVerificationsCountEventFilter;

    "ValidatedFrom(bytes32,address)"(
      hashData?: null,
      validator?: null
    ): ValidatedFromEventFilter;
    ValidatedFrom(hashData?: null, validator?: null): ValidatedFromEventFilter;
  };

  estimateGas: {
    BUY_TOKENS_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    CACHED_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_TOLLECTION_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyTokensHash(
      _data: IValidator.BuyTokensDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreateCollectionHash(
      _data: IValidator.CreateCollectionDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minVerificationsCount(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    validated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BUY_TOKENS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CACHED_DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_TOLLECTION_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBuyTokensHash(
      _data: IValidator.BuyTokensDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreateCollectionHash(
      _data: IValidator.CreateCollectionDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minVerificationsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validated(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
