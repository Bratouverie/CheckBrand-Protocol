/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IValidator {
  export type CreateCollectionDataStruct = {
    brandName: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    supplyLimit: PromiseOrValue<BigNumberish>;
    paymentAmount: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BigNumberish>;
  };

  export type CreateCollectionDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    brandName: string;
    creator: string;
    supplyLimit: BigNumber;
    paymentAmount: BigNumber;
    deadline: BigNumber;
    salt: BigNumber;
  };

  export type SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };

  export type BuyTokensDataStruct = {
    receiver: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
    paymentAmount: PromiseOrValue<BigNumberish>;
    amountOfCBCOINToPurchase: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BigNumberish>;
  };

  export type BuyTokensDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    receiver: string;
    paymentToken: string;
    paymentAmount: BigNumber;
    amountOfCBCOINToPurchase: BigNumber;
    deadline: BigNumber;
    salt: BigNumber;
  };
}

export declare namespace ICollectionData {
  export type CollectionDataStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    baseURI: PromiseOrValue<string>;
    whitelist: PromiseOrValue<BytesLike>;
    bookingList: PromiseOrValue<BytesLike>;
    publicMintTokensLimit: PromiseOrValue<BigNumberish>;
    earnings: PromiseOrValue<BigNumberish>;
    mintStage: PromiseOrValue<BigNumberish>;
  };

  export type CollectionDataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number
  ] & {
    name: string;
    symbol: string;
    baseURI: string;
    whitelist: string;
    bookingList: string;
    publicMintTokensLimit: BigNumber;
    earnings: BigNumber;
    mintStage: number;
  };
}

export declare namespace MasterStation {
  export type CreatedCollectionStruct = {
    creator: PromiseOrValue<string>;
    supplyLimit: PromiseOrValue<BigNumberish>;
  };

  export type CreatedCollectionStructOutput = [string, BigNumber] & {
    creator: string;
    supplyLimit: BigNumber;
  };
}

export interface MasterStationInterface extends utils.Interface {
  functions: {
    "BRAND_ADMIN_ROLE()": FunctionFragment;
    "CBCOIN()": FunctionFragment;
    "CHIEF_ADMIN_ROLE()": FunctionFragment;
    "COLLECTION_ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "LIST_MODERATOR_ROLE()": FunctionFragment;
    "PLATFORM_ADMIN_ROLE()": FunctionFragment;
    "brands(uint256)": FunctionFragment;
    "checkAccessToBrand(string,uint8,address)": FunctionFragment;
    "checkAccessToCollection(string,address,uint8,address)": FunctionFragment;
    "checkAccessToPlatform(uint8,address)": FunctionFragment;
    "checkCollectionByBrand(string,address)": FunctionFragment;
    "createCollection((string,address,uint256,uint256,uint256,uint256),(uint8,bytes32,bytes32)[])": FunctionFragment;
    "deployCollection(string,uint256,(string,string,string,bytes32,bytes32,uint256,uint96,uint8))": FunctionFragment;
    "disableCollection(string,address)": FunctionFragment;
    "enableCollection(string,address)": FunctionFragment;
    "factory()": FunctionFragment;
    "grantBrandAdminRole(string,address)": FunctionFragment;
    "grantCollectionAdminRole(string,address,address)": FunctionFragment;
    "grantCollectionModeratorRole(string,address,address)": FunctionFragment;
    "grantPlatformAdminRole(address)": FunctionFragment;
    "grantValidatorRole(address)": FunctionFragment;
    "hasAccessToBrand(string,uint8,address)": FunctionFragment;
    "hasAccessToCollection(string,address,uint8,address)": FunctionFragment;
    "hasAccessToPlatform(uint8,address)": FunctionFragment;
    "isBrandExist(string)": FunctionFragment;
    "isCollectionEnabled(address)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "listBrandAdmins(string)": FunctionFragment;
    "listBrands()": FunctionFragment;
    "listChiefAdmins()": FunctionFragment;
    "listCollectionAdmins(string,address)": FunctionFragment;
    "listCollectionModerators(string,address)": FunctionFragment;
    "listCreatedBrandCollections(string)": FunctionFragment;
    "listDefaultAdmins()": FunctionFragment;
    "listDeployedBrandCollections(string)": FunctionFragment;
    "listPlatformAdmins()": FunctionFragment;
    "listValidators()": FunctionFragment;
    "paymentsContract()": FunctionFragment;
    "purchaseCBCOINWithETH((address,address,uint256,uint256,uint256,uint256),(uint8,bytes32,bytes32)[])": FunctionFragment;
    "purchaseCBCOINWithToken((address,address,uint256,uint256,uint256,uint256),(uint8,bytes32,bytes32)[])": FunctionFragment;
    "revokeBrandAdminRole(string,address)": FunctionFragment;
    "revokeCollectionAdminRole(string,address,address)": FunctionFragment;
    "revokeCollectionModeratorRole(string,address,address)": FunctionFragment;
    "revokePlatformAdminRole(address)": FunctionFragment;
    "revokeValidatorRole(address)": FunctionFragment;
    "setCBCOIN(address)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setPaymentsContract(address)": FunctionFragment;
    "validatorIdx(address)": FunctionFragment;
    "validators(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BRAND_ADMIN_ROLE"
      | "CBCOIN"
      | "CHIEF_ADMIN_ROLE"
      | "COLLECTION_ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "LIST_MODERATOR_ROLE"
      | "PLATFORM_ADMIN_ROLE"
      | "brands"
      | "checkAccessToBrand"
      | "checkAccessToCollection"
      | "checkAccessToPlatform"
      | "checkCollectionByBrand"
      | "createCollection"
      | "deployCollection"
      | "disableCollection"
      | "enableCollection"
      | "factory"
      | "grantBrandAdminRole"
      | "grantCollectionAdminRole"
      | "grantCollectionModeratorRole"
      | "grantPlatformAdminRole"
      | "grantValidatorRole"
      | "hasAccessToBrand"
      | "hasAccessToCollection"
      | "hasAccessToPlatform"
      | "isBrandExist"
      | "isCollectionEnabled"
      | "isValidator"
      | "listBrandAdmins"
      | "listBrands"
      | "listChiefAdmins"
      | "listCollectionAdmins"
      | "listCollectionModerators"
      | "listCreatedBrandCollections"
      | "listDefaultAdmins"
      | "listDeployedBrandCollections"
      | "listPlatformAdmins"
      | "listValidators"
      | "paymentsContract"
      | "purchaseCBCOINWithETH"
      | "purchaseCBCOINWithToken"
      | "revokeBrandAdminRole"
      | "revokeCollectionAdminRole"
      | "revokeCollectionModeratorRole"
      | "revokePlatformAdminRole"
      | "revokeValidatorRole"
      | "setCBCOIN"
      | "setFactory"
      | "setPaymentsContract"
      | "validatorIdx"
      | "validators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BRAND_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CBCOIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CHIEF_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COLLECTION_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIST_MODERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "brands",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAccessToBrand",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAccessToCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAccessToPlatform",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCollectionByBrand",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [
      IValidator.CreateCollectionDataStruct,
      IValidator.SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      ICollectionData.CollectionDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disableCollection",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableCollection",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantBrandAdminRole",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCollectionAdminRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantCollectionModeratorRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPlatformAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantValidatorRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccessToBrand",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccessToCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccessToPlatform",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBrandExist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollectionEnabled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listBrandAdmins",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listBrands",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listChiefAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listCollectionAdmins",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listCollectionModerators",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listCreatedBrandCollections",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listDefaultAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listDeployedBrandCollections",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listPlatformAdmins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCBCOINWithETH",
    values: [IValidator.BuyTokensDataStruct, IValidator.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCBCOINWithToken",
    values: [IValidator.BuyTokensDataStruct, IValidator.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeBrandAdminRole",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCollectionAdminRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCollectionModeratorRole",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePlatformAdminRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeValidatorRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCBCOIN",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentsContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorIdx",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BRAND_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CBCOIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CHIEF_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COLLECTION_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIST_MODERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "brands", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkAccessToBrand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAccessToCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAccessToPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCollectionByBrand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantBrandAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCollectionAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantCollectionModeratorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPlatformAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantValidatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAccessToBrand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAccessToCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAccessToPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBrandExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollectionEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listBrandAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listBrands", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listChiefAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listCollectionAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listCollectionModerators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listCreatedBrandCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listDefaultAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listDeployedBrandCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listPlatformAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCBCOINWithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCBCOINWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeBrandAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCollectionAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCollectionModeratorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePlatformAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeValidatorRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCBCOIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;

  events: {
    "BrandCreated(string,address,uint256)": EventFragment;
    "BrandRoleGranted(string,uint8,address,address)": EventFragment;
    "BrandRoleRevoked(string,uint8,address,address)": EventFragment;
    "CBCOINContractSetted(address,address)": EventFragment;
    "CollectionCreated(string,address,uint256)": EventFragment;
    "CollectionDeployed(string,address,uint256,address)": EventFragment;
    "CollectionDisabled(string,address,address)": EventFragment;
    "CollectionEnabled(string,address,address)": EventFragment;
    "CollectionRoleGranted(string,address,uint8,address,address)": EventFragment;
    "CollectionRoleRevoked(string,address,uint8,address,address)": EventFragment;
    "FactorySetted(address,address)": EventFragment;
    "PaymentsContractSetted(address,address)": EventFragment;
    "PlatformRoleGranted(uint8,address,address)": EventFragment;
    "PlatformRoleRevoked(uint8,address,address)": EventFragment;
    "ValidatorRoleGranted(address,address)": EventFragment;
    "ValidatorRoleRevoked(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BrandCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrandRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrandRoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CBCOINContractSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionRoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactorySetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentsContractSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformRoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorRoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorRoleRevoked"): EventFragment;
}

export interface BrandCreatedEventObject {
  name: string;
  initAdmin: string;
  timestamp: BigNumber;
}
export type BrandCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  BrandCreatedEventObject
>;

export type BrandCreatedEventFilter = TypedEventFilter<BrandCreatedEvent>;

export interface BrandRoleGrantedEventObject {
  brandName: string;
  role: number;
  account: string;
  sender: string;
}
export type BrandRoleGrantedEvent = TypedEvent<
  [string, number, string, string],
  BrandRoleGrantedEventObject
>;

export type BrandRoleGrantedEventFilter =
  TypedEventFilter<BrandRoleGrantedEvent>;

export interface BrandRoleRevokedEventObject {
  brandName: string;
  role: number;
  account: string;
  sender: string;
}
export type BrandRoleRevokedEvent = TypedEvent<
  [string, number, string, string],
  BrandRoleRevokedEventObject
>;

export type BrandRoleRevokedEventFilter =
  TypedEventFilter<BrandRoleRevokedEvent>;

export interface CBCOINContractSettedEventObject {
  previousAddress: string;
  actualAddress: string;
}
export type CBCOINContractSettedEvent = TypedEvent<
  [string, string],
  CBCOINContractSettedEventObject
>;

export type CBCOINContractSettedEventFilter =
  TypedEventFilter<CBCOINContractSettedEvent>;

export interface CollectionCreatedEventObject {
  brandName: string;
  creator: string;
  supplyLimit: BigNumber;
}
export type CollectionCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  CollectionCreatedEventObject
>;

export type CollectionCreatedEventFilter =
  TypedEventFilter<CollectionCreatedEvent>;

export interface CollectionDeployedEventObject {
  brandName: string;
  deployer: string;
  supplyLimit: BigNumber;
  collectionAddress: string;
}
export type CollectionDeployedEvent = TypedEvent<
  [string, string, BigNumber, string],
  CollectionDeployedEventObject
>;

export type CollectionDeployedEventFilter =
  TypedEventFilter<CollectionDeployedEvent>;

export interface CollectionDisabledEventObject {
  brandName: string;
  collectionAddress: string;
  account: string;
}
export type CollectionDisabledEvent = TypedEvent<
  [string, string, string],
  CollectionDisabledEventObject
>;

export type CollectionDisabledEventFilter =
  TypedEventFilter<CollectionDisabledEvent>;

export interface CollectionEnabledEventObject {
  brandName: string;
  collectionAddress: string;
  account: string;
}
export type CollectionEnabledEvent = TypedEvent<
  [string, string, string],
  CollectionEnabledEventObject
>;

export type CollectionEnabledEventFilter =
  TypedEventFilter<CollectionEnabledEvent>;

export interface CollectionRoleGrantedEventObject {
  brandName: string;
  collectionAddress: string;
  role: number;
  account: string;
  sender: string;
}
export type CollectionRoleGrantedEvent = TypedEvent<
  [string, string, number, string, string],
  CollectionRoleGrantedEventObject
>;

export type CollectionRoleGrantedEventFilter =
  TypedEventFilter<CollectionRoleGrantedEvent>;

export interface CollectionRoleRevokedEventObject {
  brandName: string;
  collectionAddress: string;
  role: number;
  account: string;
  sender: string;
}
export type CollectionRoleRevokedEvent = TypedEvent<
  [string, string, number, string, string],
  CollectionRoleRevokedEventObject
>;

export type CollectionRoleRevokedEventFilter =
  TypedEventFilter<CollectionRoleRevokedEvent>;

export interface FactorySettedEventObject {
  previousAddress: string;
  actualAddress: string;
}
export type FactorySettedEvent = TypedEvent<
  [string, string],
  FactorySettedEventObject
>;

export type FactorySettedEventFilter = TypedEventFilter<FactorySettedEvent>;

export interface PaymentsContractSettedEventObject {
  previousAddress: string;
  actualAddress: string;
}
export type PaymentsContractSettedEvent = TypedEvent<
  [string, string],
  PaymentsContractSettedEventObject
>;

export type PaymentsContractSettedEventFilter =
  TypedEventFilter<PaymentsContractSettedEvent>;

export interface PlatformRoleGrantedEventObject {
  role: number;
  account: string;
  sender: string;
}
export type PlatformRoleGrantedEvent = TypedEvent<
  [number, string, string],
  PlatformRoleGrantedEventObject
>;

export type PlatformRoleGrantedEventFilter =
  TypedEventFilter<PlatformRoleGrantedEvent>;

export interface PlatformRoleRevokedEventObject {
  role: number;
  account: string;
  sender: string;
}
export type PlatformRoleRevokedEvent = TypedEvent<
  [number, string, string],
  PlatformRoleRevokedEventObject
>;

export type PlatformRoleRevokedEventFilter =
  TypedEventFilter<PlatformRoleRevokedEvent>;

export interface ValidatorRoleGrantedEventObject {
  account: string;
  sender: string;
}
export type ValidatorRoleGrantedEvent = TypedEvent<
  [string, string],
  ValidatorRoleGrantedEventObject
>;

export type ValidatorRoleGrantedEventFilter =
  TypedEventFilter<ValidatorRoleGrantedEvent>;

export interface ValidatorRoleRevokedEventObject {
  account: string;
  sender: string;
}
export type ValidatorRoleRevokedEvent = TypedEvent<
  [string, string],
  ValidatorRoleRevokedEventObject
>;

export type ValidatorRoleRevokedEventFilter =
  TypedEventFilter<ValidatorRoleRevokedEvent>;

export interface MasterStation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterStationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BRAND_ADMIN_ROLE(overrides?: CallOverrides): Promise<[number]>;

    CBCOIN(overrides?: CallOverrides): Promise<[string]>;

    CHIEF_ADMIN_ROLE(overrides?: CallOverrides): Promise<[number]>;

    COLLECTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<[number]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[number]>;

    LIST_MODERATOR_ROLE(overrides?: CallOverrides): Promise<[number]>;

    PLATFORM_ADMIN_ROLE(overrides?: CallOverrides): Promise<[number]>;

    brands(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checkAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkCollectionByBrand(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    createCollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployCollection(
      _brand: PromiseOrValue<string>,
      collectionIndex: PromiseOrValue<BigNumberish>,
      _data: ICollectionData.CollectionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    grantBrandAdminRole(
      _brand: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantCollectionAdminRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantCollectionModeratorRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantPlatformAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantValidatorRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBrandExist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCollectionEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listBrandAdmins(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    listBrands(overrides?: CallOverrides): Promise<[string[]]>;

    listChiefAdmins(overrides?: CallOverrides): Promise<[string[]]>;

    listCollectionAdmins(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    listCollectionModerators(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    listCreatedBrandCollections(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[MasterStation.CreatedCollectionStructOutput[]]>;

    listDefaultAdmins(overrides?: CallOverrides): Promise<[string[]]>;

    listDeployedBrandCollections(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    listPlatformAdmins(overrides?: CallOverrides): Promise<[string[]]>;

    listValidators(overrides?: CallOverrides): Promise<[string[]]>;

    paymentsContract(overrides?: CallOverrides): Promise<[string]>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeBrandAdminRole(
      _brand: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeCollectionAdminRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeCollectionModeratorRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokePlatformAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeValidatorRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCBCOIN(
      _cbcoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentsContract(
      _paymentsContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validatorIdx(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  BRAND_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

  CBCOIN(overrides?: CallOverrides): Promise<string>;

  CHIEF_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

  COLLECTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

  LIST_MODERATOR_ROLE(overrides?: CallOverrides): Promise<number>;

  PLATFORM_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

  brands(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  checkAccessToBrand(
    _brand: PromiseOrValue<string>,
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkAccessToCollection(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkAccessToPlatform(
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkCollectionByBrand(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  createCollection(
    _data: IValidator.CreateCollectionDataStruct,
    _signature: IValidator.SignatureStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployCollection(
    _brand: PromiseOrValue<string>,
    collectionIndex: PromiseOrValue<BigNumberish>,
    _data: ICollectionData.CollectionDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableCollection(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableCollection(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  grantBrandAdminRole(
    _brand: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantCollectionAdminRole(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantCollectionModeratorRole(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantPlatformAdminRole(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantValidatorRole(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasAccessToBrand(
    _brand: PromiseOrValue<string>,
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAccessToCollection(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAccessToPlatform(
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBrandExist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCollectionEnabled(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidator(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listBrandAdmins(
    _brand: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listBrands(overrides?: CallOverrides): Promise<string[]>;

  listChiefAdmins(overrides?: CallOverrides): Promise<string[]>;

  listCollectionAdmins(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listCollectionModerators(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listCreatedBrandCollections(
    _brand: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MasterStation.CreatedCollectionStructOutput[]>;

  listDefaultAdmins(overrides?: CallOverrides): Promise<string[]>;

  listDeployedBrandCollections(
    _brand: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listPlatformAdmins(overrides?: CallOverrides): Promise<string[]>;

  listValidators(overrides?: CallOverrides): Promise<string[]>;

  paymentsContract(overrides?: CallOverrides): Promise<string>;

  purchaseCBCOINWithETH(
    _data: IValidator.BuyTokensDataStruct,
    _signature: IValidator.SignatureStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchaseCBCOINWithToken(
    _data: IValidator.BuyTokensDataStruct,
    _signature: IValidator.SignatureStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeBrandAdminRole(
    _brand: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeCollectionAdminRole(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeCollectionModeratorRole(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokePlatformAdminRole(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeValidatorRole(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCBCOIN(
    _cbcoin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentsContract(
    _paymentsContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validatorIdx(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validators(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    BRAND_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

    CBCOIN(overrides?: CallOverrides): Promise<string>;

    CHIEF_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

    COLLECTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

    LIST_MODERATOR_ROLE(overrides?: CallOverrides): Promise<number>;

    PLATFORM_ADMIN_ROLE(overrides?: CallOverrides): Promise<number>;

    brands(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    checkAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkCollectionByBrand(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createCollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    deployCollection(
      _brand: PromiseOrValue<string>,
      collectionIndex: PromiseOrValue<BigNumberish>,
      _data: ICollectionData.CollectionDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    disableCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    grantBrandAdminRole(
      _brand: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantCollectionAdminRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantCollectionModeratorRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantPlatformAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantValidatorRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBrandExist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCollectionEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listBrandAdmins(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listBrands(overrides?: CallOverrides): Promise<string[]>;

    listChiefAdmins(overrides?: CallOverrides): Promise<string[]>;

    listCollectionAdmins(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listCollectionModerators(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listCreatedBrandCollections(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MasterStation.CreatedCollectionStructOutput[]>;

    listDefaultAdmins(overrides?: CallOverrides): Promise<string[]>;

    listDeployedBrandCollections(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listPlatformAdmins(overrides?: CallOverrides): Promise<string[]>;

    listValidators(overrides?: CallOverrides): Promise<string[]>;

    paymentsContract(overrides?: CallOverrides): Promise<string>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeBrandAdminRole(
      _brand: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeCollectionAdminRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeCollectionModeratorRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePlatformAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeValidatorRole(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCBCOIN(
      _cbcoin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentsContract(
      _paymentsContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorIdx(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "BrandCreated(string,address,uint256)"(
      name?: PromiseOrValue<string> | null,
      initAdmin?: PromiseOrValue<string> | null,
      timestamp?: null
    ): BrandCreatedEventFilter;
    BrandCreated(
      name?: PromiseOrValue<string> | null,
      initAdmin?: PromiseOrValue<string> | null,
      timestamp?: null
    ): BrandCreatedEventFilter;

    "BrandRoleGranted(string,uint8,address,address)"(
      brandName?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      sender?: null
    ): BrandRoleGrantedEventFilter;
    BrandRoleGranted(
      brandName?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      sender?: null
    ): BrandRoleGrantedEventFilter;

    "BrandRoleRevoked(string,uint8,address,address)"(
      brandName?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      sender?: null
    ): BrandRoleRevokedEventFilter;
    BrandRoleRevoked(
      brandName?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      sender?: null
    ): BrandRoleRevokedEventFilter;

    "CBCOINContractSetted(address,address)"(
      previousAddress?: PromiseOrValue<string> | null,
      actualAddress?: PromiseOrValue<string> | null
    ): CBCOINContractSettedEventFilter;
    CBCOINContractSetted(
      previousAddress?: PromiseOrValue<string> | null,
      actualAddress?: PromiseOrValue<string> | null
    ): CBCOINContractSettedEventFilter;

    "CollectionCreated(string,address,uint256)"(
      brandName?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      supplyLimit?: null
    ): CollectionCreatedEventFilter;
    CollectionCreated(
      brandName?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      supplyLimit?: null
    ): CollectionCreatedEventFilter;

    "CollectionDeployed(string,address,uint256,address)"(
      brandName?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null,
      supplyLimit?: null,
      collectionAddress?: null
    ): CollectionDeployedEventFilter;
    CollectionDeployed(
      brandName?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null,
      supplyLimit?: null,
      collectionAddress?: null
    ): CollectionDeployedEventFilter;

    "CollectionDisabled(string,address,address)"(
      brandName?: PromiseOrValue<string> | null,
      collectionAddress?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): CollectionDisabledEventFilter;
    CollectionDisabled(
      brandName?: PromiseOrValue<string> | null,
      collectionAddress?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): CollectionDisabledEventFilter;

    "CollectionEnabled(string,address,address)"(
      brandName?: PromiseOrValue<string> | null,
      collectionAddress?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): CollectionEnabledEventFilter;
    CollectionEnabled(
      brandName?: PromiseOrValue<string> | null,
      collectionAddress?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): CollectionEnabledEventFilter;

    "CollectionRoleGranted(string,address,uint8,address,address)"(
      brandName?: PromiseOrValue<string> | null,
      collectionAddress?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      account?: null,
      sender?: null
    ): CollectionRoleGrantedEventFilter;
    CollectionRoleGranted(
      brandName?: PromiseOrValue<string> | null,
      collectionAddress?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      account?: null,
      sender?: null
    ): CollectionRoleGrantedEventFilter;

    "CollectionRoleRevoked(string,address,uint8,address,address)"(
      brandName?: PromiseOrValue<string> | null,
      collectionAddress?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      account?: null,
      sender?: null
    ): CollectionRoleRevokedEventFilter;
    CollectionRoleRevoked(
      brandName?: PromiseOrValue<string> | null,
      collectionAddress?: PromiseOrValue<string> | null,
      role?: PromiseOrValue<BigNumberish> | null,
      account?: null,
      sender?: null
    ): CollectionRoleRevokedEventFilter;

    "FactorySetted(address,address)"(
      previousAddress?: PromiseOrValue<string> | null,
      actualAddress?: PromiseOrValue<string> | null
    ): FactorySettedEventFilter;
    FactorySetted(
      previousAddress?: PromiseOrValue<string> | null,
      actualAddress?: PromiseOrValue<string> | null
    ): FactorySettedEventFilter;

    "PaymentsContractSetted(address,address)"(
      previousAddress?: PromiseOrValue<string> | null,
      actualAddress?: PromiseOrValue<string> | null
    ): PaymentsContractSettedEventFilter;
    PaymentsContractSetted(
      previousAddress?: PromiseOrValue<string> | null,
      actualAddress?: PromiseOrValue<string> | null
    ): PaymentsContractSettedEventFilter;

    "PlatformRoleGranted(uint8,address,address)"(
      role?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): PlatformRoleGrantedEventFilter;
    PlatformRoleGranted(
      role?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): PlatformRoleGrantedEventFilter;

    "PlatformRoleRevoked(uint8,address,address)"(
      role?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): PlatformRoleRevokedEventFilter;
    PlatformRoleRevoked(
      role?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): PlatformRoleRevokedEventFilter;

    "ValidatorRoleGranted(address,address)"(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ValidatorRoleGrantedEventFilter;
    ValidatorRoleGranted(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ValidatorRoleGrantedEventFilter;

    "ValidatorRoleRevoked(address,address)"(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ValidatorRoleRevokedEventFilter;
    ValidatorRoleRevoked(
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): ValidatorRoleRevokedEventFilter;
  };

  estimateGas: {
    BRAND_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    CBCOIN(overrides?: CallOverrides): Promise<BigNumber>;

    CHIEF_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    COLLECTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LIST_MODERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PLATFORM_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    brands(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkCollectionByBrand(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployCollection(
      _brand: PromiseOrValue<string>,
      collectionIndex: PromiseOrValue<BigNumberish>,
      _data: ICollectionData.CollectionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    grantBrandAdminRole(
      _brand: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantCollectionAdminRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantCollectionModeratorRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantPlatformAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantValidatorRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBrandExist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollectionEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listBrandAdmins(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listBrands(overrides?: CallOverrides): Promise<BigNumber>;

    listChiefAdmins(overrides?: CallOverrides): Promise<BigNumber>;

    listCollectionAdmins(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listCollectionModerators(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listCreatedBrandCollections(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listDefaultAdmins(overrides?: CallOverrides): Promise<BigNumber>;

    listDeployedBrandCollections(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listPlatformAdmins(overrides?: CallOverrides): Promise<BigNumber>;

    listValidators(overrides?: CallOverrides): Promise<BigNumber>;

    paymentsContract(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeBrandAdminRole(
      _brand: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeCollectionAdminRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeCollectionModeratorRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokePlatformAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeValidatorRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCBCOIN(
      _cbcoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentsContract(
      _paymentsContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validatorIdx(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BRAND_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CBCOIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CHIEF_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COLLECTION_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIST_MODERATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PLATFORM_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    brands(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkCollectionByBrand(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployCollection(
      _brand: PromiseOrValue<string>,
      collectionIndex: PromiseOrValue<BigNumberish>,
      _data: ICollectionData.CollectionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantBrandAdminRole(
      _brand: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantCollectionAdminRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantCollectionModeratorRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantPlatformAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantValidatorRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBrandExist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollectionEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listBrandAdmins(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listBrands(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listChiefAdmins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listCollectionAdmins(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listCollectionModerators(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listCreatedBrandCollections(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listDefaultAdmins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listDeployedBrandCollections(
      _brand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listPlatformAdmins(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentsContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signature: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeBrandAdminRole(
      _brand: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeCollectionAdminRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeCollectionModeratorRole(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokePlatformAdminRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeValidatorRole(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCBCOIN(
      _cbcoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentsContract(
      _paymentsContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validatorIdx(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
