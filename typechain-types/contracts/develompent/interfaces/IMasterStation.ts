/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IMasterStationInterface extends utils.Interface {
  functions: {
    "checkAccessToBrand(string,uint8,address)": FunctionFragment;
    "checkAccessToCollection(string,address,uint8,address)": FunctionFragment;
    "checkAccessToPlatform(uint8,address)": FunctionFragment;
    "checkCollectionByBrand(string,address)": FunctionFragment;
    "hasAccessToBrand(string,uint8,address)": FunctionFragment;
    "hasAccessToCollection(string,address,uint8,address)": FunctionFragment;
    "hasAccessToPlatform(uint8,address)": FunctionFragment;
    "isCollectionEnabled(address)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "listValidators()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkAccessToBrand"
      | "checkAccessToCollection"
      | "checkAccessToPlatform"
      | "checkCollectionByBrand"
      | "hasAccessToBrand"
      | "hasAccessToCollection"
      | "hasAccessToPlatform"
      | "isCollectionEnabled"
      | "isValidator"
      | "listValidators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkAccessToBrand",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAccessToCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAccessToPlatform",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCollectionByBrand",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccessToBrand",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccessToCollection",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccessToPlatform",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollectionEnabled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listValidators",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAccessToBrand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAccessToCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAccessToPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCollectionByBrand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAccessToBrand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAccessToCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAccessToPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollectionEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listValidators",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMasterStation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMasterStationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkCollectionByBrand(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    hasAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCollectionEnabled(
      _collectin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listValidators(overrides?: CallOverrides): Promise<[string[]]>;
  };

  checkAccessToBrand(
    _brand: PromiseOrValue<string>,
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkAccessToCollection(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkAccessToPlatform(
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkCollectionByBrand(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  hasAccessToBrand(
    _brand: PromiseOrValue<string>,
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAccessToCollection(
    _brand: PromiseOrValue<string>,
    _collection: PromiseOrValue<string>,
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAccessToPlatform(
    _role: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCollectionEnabled(
    _collectin: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidator(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listValidators(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    checkAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkCollectionByBrand(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCollectionEnabled(
      _collectin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listValidators(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    checkAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkCollectionByBrand(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollectionEnabled(
      _collectin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listValidators(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkCollectionByBrand(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccessToBrand(
      _brand: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccessToCollection(
      _brand: PromiseOrValue<string>,
      _collection: PromiseOrValue<string>,
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccessToPlatform(
      _role: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollectionEnabled(
      _collectin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
