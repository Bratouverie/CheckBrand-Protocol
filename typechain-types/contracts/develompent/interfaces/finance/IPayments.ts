/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IValidator {
  export type CreateCollectionDataStruct = {
    brandName: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    supplyLimit: PromiseOrValue<BigNumberish>;
    paymentAmount: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BigNumberish>;
  };

  export type CreateCollectionDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    brandName: string;
    creator: string;
    supplyLimit: BigNumber;
    paymentAmount: BigNumber;
    deadline: BigNumber;
    salt: BigNumber;
  };

  export type SignatureStruct = {
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type SignatureStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };

  export type BuyTokensDataStruct = {
    receiver: PromiseOrValue<string>;
    paymentToken: PromiseOrValue<string>;
    paymentAmount: PromiseOrValue<BigNumberish>;
    amountOfCBCOINToPurchase: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BigNumberish>;
  };

  export type BuyTokensDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    receiver: string;
    paymentToken: string;
    paymentAmount: BigNumber;
    amountOfCBCOINToPurchase: BigNumber;
    deadline: BigNumber;
    salt: BigNumber;
  };
}

export interface IPaymentsInterface extends utils.Interface {
  functions: {
    "paymentForTheCreationOfACollection((string,address,uint256,uint256,uint256,uint256),(uint8,bytes32,bytes32)[])": FunctionFragment;
    "purchaseCBCOINWithETH((address,address,uint256,uint256,uint256,uint256),(uint8,bytes32,bytes32)[])": FunctionFragment;
    "purchaseCBCOINWithToken((address,address,uint256,uint256,uint256,uint256),(uint8,bytes32,bytes32)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "paymentForTheCreationOfACollection"
      | "purchaseCBCOINWithETH"
      | "purchaseCBCOINWithToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "paymentForTheCreationOfACollection",
    values: [
      IValidator.CreateCollectionDataStruct,
      IValidator.SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCBCOINWithETH",
    values: [IValidator.BuyTokensDataStruct, IValidator.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCBCOINWithToken",
    values: [IValidator.BuyTokensDataStruct, IValidator.SignatureStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "paymentForTheCreationOfACollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCBCOINWithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCBCOINWithToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPayments extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPaymentsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    paymentForTheCreationOfACollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  paymentForTheCreationOfACollection(
    _data: IValidator.CreateCollectionDataStruct,
    _signatures: IValidator.SignatureStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchaseCBCOINWithETH(
    _data: IValidator.BuyTokensDataStruct,
    _signatures: IValidator.SignatureStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchaseCBCOINWithToken(
    _data: IValidator.BuyTokensDataStruct,
    _signatures: IValidator.SignatureStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    paymentForTheCreationOfACollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    paymentForTheCreationOfACollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    paymentForTheCreationOfACollection(
      _data: IValidator.CreateCollectionDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchaseCBCOINWithETH(
      _data: IValidator.BuyTokensDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchaseCBCOINWithToken(
      _data: IValidator.BuyTokensDataStruct,
      _signatures: IValidator.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
